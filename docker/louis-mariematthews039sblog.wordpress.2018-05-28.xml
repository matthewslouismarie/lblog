<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.6" created="2018-05-28 22:26" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Louis-Marie Matthews&#039;s Blog</title>
	<link>http://localhost</link>
	<description>Just another WordPress site</description>
	<pubDate>Mon, 28 May 2018 22:26:26 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://localhost</wp:base_site_url>
	<wp:base_blog_url>http://localhost</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[matthewslouismarie]]></wp:author_login><wp:author_email><![CDATA[matthewslouismarie@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[matthewslouismarie]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[symfony-4]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Symfony 4]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorised]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorised]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[web-development]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Web Development]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[wordpress]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[WordPress]]></wp:cat_name>
	</wp:category>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[symfony-4]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Symfony 4]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[top-menu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Top Menu]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorised]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorised]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[web-development]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Web Development]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wordpress]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[WordPress]]></wp:term_name>
	</wp:term>
	<wp:term><wp:term_id>6</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[top-menu]]></wp:term_slug><wp:term_name><![CDATA[Top Menu]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=4.9.6</generator>

	<item>
		<title>Hello world!</title>
		<link>http://localhost/?p=1</link>
		<pubDate>Mon, 28 May 2018 20:54:03 +0000</pubDate>
		<dc:creator><![CDATA[matthewslouismarie]]></dc:creator>
		<guid isPermaLink="false">http://localhost/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to WordPress. This is your first post. Edit or delete it, then start writing!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2018-05-28 20:54:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-28 20:54:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1527545863]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:1;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[A WordPress Commenter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wapuu@wordpress.example]]></wp:comment_author_email>
			<wp:comment_author_url>https://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-05-28 20:54:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-05-28 20:54:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this is a comment.
To get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.
Commenter avatars come from <a href="https://gravatar.com">Gravatar</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://localhost/?p=4</link>
		<pubDate>Sun, 27 May 2018 16:18:56 +0000</pubDate>
		<dc:creator><![CDATA[matthewslouismarie]]></dc:creator>
		<guid isPermaLink="false">http://localhost/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to WordPress. This is your first post. Edit or delete it, then start writing!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2018-05-27 16:18:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-27 16:18:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world-2__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1527545865]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[hello-world-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:2;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[A WordPress Commenter]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wapuu@wordpress.example]]></wp:comment_author_email>
			<wp:comment_author_url>https://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-05-27 16:18:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-05-27 16:18:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this is a comment.
To get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.
Commenter avatars come from <a href="https://gravatar.com" rel="nofollow">Gravatar</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Home</title>
		<link>http://localhost/?p=5</link>
		<pubDate>Mon, 28 May 2018 20:54:10 +0000</pubDate>
		<dc:creator><![CDATA[]]></dc:creator>
		<guid isPermaLink="false">http://localhost/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2018-05-28 20:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-28 20:54:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[home]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="top-menu"><![CDATA[Top Menu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://matthewslouismarie.fr/blog/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portfolio</title>
		<link>http://localhost/?p=6</link>
		<pubDate>Mon, 28 May 2018 20:54:11 +0000</pubDate>
		<dc:creator><![CDATA[]]></dc:creator>
		<guid isPermaLink="false">http://localhost/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2018-05-28 20:54:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-28 20:54:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[portfolio]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="top-menu"><![CDATA[Top Menu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://matthewslouismarie.fr]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Database Unit Testing and Symfony 4</title>
		<link>http://localhost/?p=43</link>
		<pubDate>Sun, 07 Jan 2018 17:38:57 +0000</pubDate>
		<dc:creator><![CDATA[matthewslouismarie]]></dc:creator>
		<guid isPermaLink="false">https://matthewslouismarie.fr/blog/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[Symfony, especially Symfony 4, is quite a good web framework. It comes with a variety of very useful features. The problem is, they are often poorly documented on the official documentation as well as elsewhere.

One such feature is unit testing, or rather database unit testing to be more precise.  Symfony advises against the use of PHPUnit and DBUnit (an official addition to PHPUnit very useful for unit testing). This is because it provides its own version of it. It's about the same thing, but Symfony PHPUnit's version is supposed to better integrate with Symfony.

With Symfony 4, you normally only have to run the following from your project's root directory:

<code>composer require phpunit</code>

This, among other things, creates the script "bin/phpunit" in your project's directory. This is the file you have to run to test your project, e.g. in Travis!

You then create your tests in the "tests/" folder (from your project's root directory). You can use the following command to create a new test:

<code>bin/console make:unit-test</code>

And you write your normal PHPUnit tests.

This article is not about PHPUnit in general, or about the additional features brought up by Symfony which are already well-documented, such as the <a href="https://symfony.com/doc/current/testing.html">Web Crawler</a>.

Instead, it aims to answer the following question: How can I do database unit testing with Symfony 4? By database unit testing, I'm talking about features similar to those provided by DBUnit: testing using a SQLite database to not interfere with the production or development databases, setting up the schema, inserting test data, and cleaning the database before the next test.

Symfony 4 doesn't provide these features out of the box, but it's possible. By looking through Symfony 4's source code (and especially the code run when executing Doctrine commands), I was able to create an abstract class that my unit tests inherit from to get access to the previously mentioned features.

First, let's tell Symfony's PHPUnit to use an in-memory database. Go in "phpunit.xml.dist", and add the following at the end of the php brackets.

<script src="https://gist.github.com/matthewslouismarie/b19584bc928ad8b26338a6287a004e97.js"></script>

Also, don't forget to set up sessions in "config/packages/test/framework.yaml".

<script src="https://gist.github.com/matthewslouismarie/f6e2895eea651327ec858387dfe48171.js"></script>

Notice I've also activated CSRF protection and the test environment. The session field tells Symfony to use the test session engine. Using the production or development one won't work because PHPUnit creates output before the session is even started.

You can then write your unit tests. They need to be located inside the tests directory. You can then make them inherit the following class:

<script src="https://gist.github.com/matthewslouismarie/dc4d3c6d1f225d862e4f915c2c979cee.js"></script>

Make your unit tests inherit from this class and you'll be able to access the database and your entities as you would normally do in a production or development environment!

As you can see, there are still a few todos left. In particular, you'll need to hard-code your fixtures (line 30) and add more lines if you have multiple fixtures.

Lastly, set up your services in the test environment in config/services_test.yaml. It shouldn't be different from your services.yaml file, except public should be set to true. This is because the container is the only way to access services in your unit tests.

<script src="https://gist.github.com/matthewslouismarie/7e0f00e9df2429fce19505bfb4c3dead.js"></script>

To access services from inside your unit tests, you'll have to get access to the container, and call get() with either the service id or qualified class name (with the namespace!). For example:

<script src="https://gist.github.com/matthewslouismarie/71d580cee9aa338e36196d327112075b.js"></script>

Any questions, just ask!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2018-01-07 17:38:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-07 17:38:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unit-testing-and-symfony-4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="symfony-4"><![CDATA[Symfony 4]]></category>
		<category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_637e4378b7f3e5773027917cf7edca85]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_98c7d4397b69aefb82f5556e55b2f256]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Making WordPress Multilingual</title>
		<link>http://localhost/?p=66</link>
		<pubDate>Fri, 02 Feb 2018 16:43:04 +0000</pubDate>
		<dc:creator><![CDATA[matthewslouismarie]]></dc:creator>
		<guid isPermaLink="false">https://matthewslouismarie.fr/blog/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[WordPress supports comes with internationalisation built-in. When you install your WordPress website, you are asked to choose among a fairly extensive list of languages. That's great.

So what's the problem? Well, what do you do if you want your website to be available in more than one language? For example, you want your users to be able to access your website (e.g. https://matthewslouismarie.fr/blog), and choose the language they want the articles and everything to be in by clicking a flag button in the top bar.

There's a simple solution to it, albeit it requires a few steps.
<h1>1: gettext</h1>
Yes, the solution has a name. It's called gettext. It's a WordPress filter hook.

If you don't know what a filter hook is, it is basically a string to which you attach a function that accepts parameters and returns something. Pretty vague so far, but you'll get the hang of it in a few moments. Just sit tight.

NB: The article assumes you have your custom WordPress theme set up that you can edit. If this is not the case, you should be able to create a child theme of the theme you're currently using. There's extensive documentation about that on the Internet.

So, you're in your WordPress theme's folder. As you probably know, for every page request, the file functions.php (which is actually a really bad name for a file that initialises your theme) contained within your theme's folder is the first script of your theme to be called. We'll add our dynamic translation function there, and we'll hook it into gettext.

Just add this code to the functions.php file of your theme:

<script src="https://gist.github.com/matthewslouismarie/305d40f9e691d5808ed288cdfebd4736.js"></script>

As you may have noticed, I am not following the WordPress coding style here, but instead the PSR-1 and PSR-2. For some reasons WordPress decided to go against the established standards and promote a coding style incompatible with the rest of the PHP world…

If you refresh any page of your website now, you should understand how filter hooks work, and in particular how gettext works. All the strings that would be translated by WordPress otherwise are passed to the function dynamicallyTranslate, and changed for what the function returns. You should also notice some strings are appended with "French for ", while some others are not.

This is because the gettext filter doesn't apply to all the text displayed on your website, only to the text displayed using the __() or _e() function. We'll see how to translate the rest later, don't worry. For now, let's focus on what we can translate with gettext, which are the strings currently appended with "French for ".

You can remove the "French for" part in your <code>dynamicallyTranslate</code> function. I just asked you to do that so you could understand how gettext works.

Before we move on to returning the actual French translation of the phrase, let's allow the user to set their language. We don't want to force the user to use the website in French! They must be able to choose the language themselves.

We'll create two page templates, page-en_gb.php and page-fr_fr.php.

<script src="https://gist.github.com/matthewslouismarie/92dc3120b06f12c5ae622000b8521d91.js"></script>
<script src="https://gist.github.com/matthewslouismarie/7dae15de0a8f1446cca896ef92441fa4.js"></script>

Now, from the WordPress admin panel, create two pages. Give them the name you want ("Set language to English" and "Passer en français" for example), but set the slug to the corresponding page template prefix (either "en_gb" or "fr_fr"). I suggest you add the two pages you created to one of your sidebars or something, so that you can access them more easily later.

Then, at the very top of functions.php, we'll add the following:

<script src="https://gist.github.com/matthewslouismarie/3209c16b4364951ee64d1e57c3068275.js"></script>

Now, whenever the user accesses the page with the slug "en_gb", USER_LANG is set to "en_gb". Whenever the user accesses the page with the slug "fr_fr", USER_LANG is set to "fr_fr". If the cookie USER_LANG is not set, it defaults to "en_gb".

We can make use of this constant in our <code>dynamicallyTranslate</code> function.

<script src="https://gist.github.com/matthewslouismarie/c4a2250a2890e2d038f0e6f85bff0a98.js"></script>

This is just a basic working example. You're free to choose whichever way you prefer to set the user's language.

At this point, we have the structure in place. Let's just recap: any text that is passed to __() or _e() is intercepted by our function, dynamicallyTranslate. There is still some text that won't be intercepted by our function, but we'll work on that later. For now, let's only focus on the text that is passed to __() and _e().

There is a variety of way to make dynamicallyTranslate work. A very simple (and, one could argue, not very elegant) way to make it work is to use a PHP array.

At this point, our dynamicTranslate function looks like this:

<script src="https://gist.github.com/matthewslouismarie/c5734aecab96c0d69fa6c83d096d984c.js"></script>

And the file translation-arrays/fr.php would be:

<script src="https://gist.github.com/matthewslouismarie/1e0b191dfb503d85725d68b5c4c6df3e.js"></script>
<h1>Converting PO files into PHP arrays</h1>
WordPress already comes with translations in tons of different languages. It's often also the case for themes and plugins. Translations often take the form of PO files. WordPress translations are located in <code>wp-content/languages</code>. Themes and plugins' translations are located somewhere in <code>wp-content/themes/<em>{themefolder}</em>/</code> or <code>wp-content/plugins/<em>{pluginfolder}</em>/</code>, although themes and plugins do not always come with several translations, if any at all.

Our goal is to convert these PO files into PHP arrays so that we can use them in our <code>dynamicallyTranslate</code> function.

So we'll find the translations we're looking for that already exist under the form of PO files. Now, we'll convert them into PHP arrays.

Now, still as part of our project to dynamically translate our theme in French, find the PO translations of WordPress in… French! They are in <code>wp-content/languages/</code>.
If they don't exist, go in your WordPress Dashboard, go in Settings, then in General, and set the language to French (France). The French PO files should then be there in <code>wp-content/languages/</code>. You can revert back to English afterwards.

Copy the PO files that end with<code>fr_FR.po</code> into your theme folder (<code>wp-content/themes/{yourtheme}</code>). Don't forget the PO files in wp-content/languages/themes and wp-content/languages/plugins! Create also a folder named <code>translations</code> in your theme folder (<code>wp-content/themes/{yourtheme}</code>), it will be useful very shortly.

Create a new file in <code>wp-content/themes/{yourtheme}</code>. Name it <code>po-to-php</code> and put this inside.

<script src="https://gist.github.com/matthewslouismarie/e65319702993bd6cbbb2f903a7809cf6.js"></script>

Call that script by doing, from the theme folder, <code>php po-to-php admin-fr_FR.po admin-network-fr_FR.po continent-cities-fr_FR.po fr_FR.php</code>. This will create a new file, <code>fr_FR.php</code>, in the theme folder's <code>translations</code> directory.

Now, back to our <code>dynamicallyTranslate</code> function. We can do:

<script src="https://gist.github.com/matthewslouismarie/c5734aecab96c0d69fa6c83d096d984c.js"></script>

But this would not be very efficient as the file would be included every time the function <code>dynamicallyTranslate</code> is called (which is, almost every time translatable text is displayed in any page). We could use a class instead. Create <code>wp-content/themes/{yourtheme}/classes/DynamicTranslator.php</code> and put this into it:

<script src="https://gist.github.com/matthewslouismarie/143600913f2bcc200f06e1da3df730d5.js"></script>

Now in function, add this at the very beginning of the file:

<script src="https://gist.github.com/matthewslouismarie/6ef5ff1d71ec81d717e84d5ed7c61497.js"></script>

And replace the <code>dynamicallyTranslate</code> function and its hook into <code>gettext</code> by:

<script src="https://gist.github.com/matthewslouismarie/0161919fbacb085b154cdf06eeee0e90.js"></script>

If you notice there are some missing translations, simply add them to your <code>fr_FR.php</code> file.
<h1>Restrict Post Queries</h1>
So, we've now set up a system to dynamically translate all the static text, that is the text that is already written in the source code of either WordPress, the themes or the plugins you're using.

What about articles and pages then? It should be possible to define a language for them, and to restrict all the displayed posts and articles to the user's current language.

Fortunately, it's possible, and quite straightforward. Simply add this to your functions.php file.

<script src="https://gist.github.com/matthewslouismarie/20c0483f2cccac0069475a8270e60ad3.js"></script>

Put it right after
<code>add_filter('gettext', [$translator, 'translate'], 10, 3);</code>
<h1>Sidebars</h1>
So, what about sidebars then? Because sidebars can contain links to posts or pages that are language specific, we want to have a version of each sidebar per language.

So, for example, we'd have a sidebar for en_UK and another one for fr_FR.

First, let's see what sidebars we currently have. From the WordPress dashboard, go in Appearance &gt; Widgets. At the right hand side of the page, you'll see all the sidebars of your theme.

<img class="alignnone size-medium wp-image-80" src="http://localhost/wp-content/uploads/2018/02/Screenshot-from-2018-02-08-09-29-45-300x169.png" alt="You can see a list of all the sidebars of your theme in Appearance &gt; Widgets." width="300" height="169" />

We'll create a French equivalent of each sidebar.

So, in my case, I will create three new sidebars, one for each already existing one.

<script src="https://gist.github.com/matthewslouismarie/0946b4b56febfd85323dba01e6088701.js"></script>

Now, if you refresh the Widgets page (in Appearance &gt; Widgets), you should see the added sidebars, depending on how many you added.

The only thing you need to do afterwards is to find occurrences of function calls to dynamic_sidebar(…). It gets called with a sidebar index. So, in my case, I would replace a call to dynamic_sidebar('sidebar-1') by:

<script src="https://gist.github.com/matthewslouismarie/723238b51cfc735ed33937b84d78b893.js"></script>

To see the list of all available sidebars (with their ids), simply temporarily add…

<script src="https://gist.github.com/matthewslouismarie/bd3c13957a05294b6be6fb4031115881.js"></script>

In one of your templates (e.g. home.php). Refresh the page, write down the displayed sidebars, and remove the code you just added to the template.
<h1>References</h1>
gettext documentation: https://developer.wordpress.org/reference/hooks/gettext/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2018-02-02 16:43:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-02 16:43:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dynamically-translating-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[WordPress]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Secure Second-Factor Authentication using U2F</title>
		<link>http://localhost/?p=88</link>
		<pubDate>Wed, 28 Feb 2018 19:57:16 +0000</pubDate>
		<dc:creator><![CDATA[matthewslouismarie]]></dc:creator>
		<guid isPermaLink="false">https://matthewslouismarie.fr/blog/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Introduction</h1>
The Dundee PHP meetups take place at the end of every month and consist in a technical talk (related to PHP specifically, or to programming in general) followed by a time for discussing the talk and asking questions.  They are usually attended by PHP professionals and occasionally by some students as well.

I have been attending these almost since I entered the University of Dundee, and I have really appreciated these meetings as they are for me an occasion to learn new things, either from the talk itself or from the discussion with PHP professionals.
<h1>Why U2F</h1>
After attending these meetings for all these years I wanted to participate and give a talk, I simply needed a subject. In final year, my supervisor advised me to direct my honours project towards the recent U2F technology, and it turns out it can be implemented using PHP!

This was a very interesting subject (at least for me) which never was discussed at any Dundee PHP meetings. For that reason, I offered Iain, the Dundee PHP organiser, to give a talk about this subject, and he suggested me to do it at the February meeting.
<h1>Summary of the presentation</h1>
My presentation was split into four parts:
<ol>
 	<li>What is Second-Factor Authentication?</li>
 	<li>What is U2F?</li>
 	<li>Implementing U2F using PHP</li>
 	<li>Is U2F Perfect?</li>
</ol>
The slides can be accessed <a href="https://www.slideshare.net/LouisMarieMatthews/secure-secondfactor-authentication-using-u2f-and-php">here</a>.
<h2>What is Second-Factor Authentication?</h2>
The first section gave a definition of Second-Factor Authentication (abbreviated as 2FA). Second-Factor Authentication is an additional security measure present on some online services that augmentr the security of authentication to mitigate against impersonation attacks. It relies on a third party, usually a mobile phone, that was associated with the user before the authentication process.

A typical example are codes sent by text. The online service, e.g. Facebook, sends a one-time code to the user's phone when a login attempt is made from an unrecognised device (e.g. a new computer).

<a href="http://localhost/wp-content/uploads/2018/02/text2fa_2.jpg"><img class="aligncenter wp-image-89 size-medium" src="http://localhost/wp-content/uploads/2018/02/text2fa_2-300x135.jpg" alt="Authentication using Text 2FA happens in several steps." width="300" height="135" /></a>

Other current 2FA strategies include Google Authenticator, and (H/T)OTP codes.

Current 2FA strategies suffer from several issues. Let's consider codes sent by text. It is a cumbersome process. (The user needs to take out their phone, wait for the text, and copy-paste a code they receive on it.) It is also more expensive for the online service if it has to send texts for every new login request (or for any other protected operation). It also impacts the user's privacy when they are asked to give away their mobile phone number, and it can suffer from availability issues if the phone does not have access to the mobile network.

Current 2FA strategies are also less secure as they allow for man-in-the-middle attacks and sometimes rely on insecure devices (such as a mobile phone).
<h2>What is U2F?</h2>
U2F is the latest second-factor authentication scheme and addresses all the aforementioned issues. It still relies on a third party, which in this case is called a <strong>U2F Key</strong>.

A U2F Key is a device exclusively made and designed to perform U2F second-factor authentication and attempt to be tamper-resistant. The simplicity of their use cases and of their features make it impossible to, for example, install malware on it as it would be the case for a mobile phone. They usually come with a very limited memory.

The U2F specifications are developed by the FIDO alliance (a consortium of several companies, including Google and YubiKey). They define the U2F protocol and the way the browser communicates with the key, and vice versa.

The U2F scheme describes interactions between the client (which includes the user, the browser and their U2F Key or Keys), and the online service.

The communication between the browser and the online service needs to be secure (using HTTPS), or the U2F scheme can "easily" be defeated. It is an actual requirement and the U2F scheme cannot be implemented without HTTPS.

The U2F scheme defines two interaction types: registration, and authentication.

In the case of the registration interaction, the online service generates a U2F Token Registration Request. The browser receives it, and passes it to the U2F key connected to the browser's device (via NFC for a mobile phone or USB for a computer). The U2F key first asks for the user's confirmation. In the case of a YubiKey, the U2F Key blinks and the user needs to press the blinking button. The U2F key then generates a U2F token, and this token is passed back to the browser, which passes back to the online service. The online service (called n RP, a Relying Party in U2F) processes it and persists it into its database.

<a href="http://localhost/wp-content/uploads/2018/02/u2f.jpg"><img class="aligncenter wp-image-90 size-medium" src="http://localhost/wp-content/uploads/2018/02/u2f-300x103.jpg" alt="The U2F Registration Process" width="300" height="103" /></a>

In the case of the authentication interaction, the online service is in the process of authenticating the user. Traditionally, this takes the form of a username &amp; password form. The user enters a correct combination and the online service checks them. Afterwards, the online service retrieves all the U2F Tokens associated with the user. From there, it generates a series of Sign Requests. As was the case for registration, the browser receives the Sign Requests and passes them to the U2F Key, again connected to the browser's device. The U2F Key asks for the user confirmation once again (e.g. by blinking), and generates a Sign Response for the U2F tokens it generated. It is then passed to the browser which passes it to the online service which verifies it and authenticates the user.

This is a very simplified overview of the U2F scheme, and it does not mention the counter security measure, multiple U2F keys per user, U2F Key brand certificates, nor does it mention what exactly the content of each message, the motivation between certain mechanisms (such as user confirmation), the types of client-side implementations, etc.

<a href="http://localhost/wp-content/uploads/2018/02/u2fauthentication.jpg"><img class="aligncenter wp-image-91 size-medium" src="http://localhost/wp-content/uploads/2018/02/u2fauthentication-300x151.jpg" alt="The U2F Authentication Process" width="300" height="151" /></a>

The U2F protocol is more secure than current 2FA mechanisms as it protects against all man-in-the-middle attacks. (Well, not all man-in-the-middle attacks, but it does it much better than current 2FA mechanisms.) To put it shortly, this is because it encodes the application id (e.g. the URL of the RP) in each message, which can then be checked either by the U2F Key or by the RP.

It was shown that U2F reduces support costs and greatly improves the usability and speed of the authentication process (Srinivas, 2016). Its use is 4 times faster for the user than Google Authenticator (Ehrensvard <em>et al.</em>, 2015).
<h2>Implementing U2F using PHP</h2>
I will now briefly describe how to add U2F to an existing PHP application.

I will be working on a very simple website made using Symfony that simply supports registration and authentication. It uses Docker.

Implementing U2F in this case can be done in 5 steps.
<ol>
 	<li><a href="https://github.com/matthewslouismarie/u2fapplicationexample/tree/base">Branch base</a>. We have a very simple working website made using Symfony and Docker. To run it, you only need Docker and Docker Compose. Go in the repository's root directory and run <code>docker-compose up -d --build</code>.</li>
 	<li><a href="https://github.com/matthewslouismarie/u2fapplicationexample/tree/https">Branch https</a>. As I mentioned before, U2F requires HTTPS. We'll need to add it to Docker. This requires us to set static IP addresses in the docker-compose.yml file, to expose the 443 port (still in the docker-compose.yml file), to create self-signed TLS certificates. (<a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-16-04">This great and short article explains how to create self-signed certificates.</a>) We then need set up Apache to use these (take a look in the "apache" folder of the repository to see how it works) and to enable some Apache modules.</li>
 	<li><a href="https://github.com/matthewslouismarie/u2fapplicationexample/tree/javascript">Branch javascript</a>. We simply add the Javascript dependency for Google's high-level implementation of the U2F protocol, which allows the browser can communicate with the U2F Key. Simply do: <code>npm -i google-u2f-api.js --save</code>.</li>
 	<li><a href="https://github.com/matthewslouismarie/u2fapplicationexample/tree/firehed">Branch firehed</a>. Similarly, we add a library that allows us to generate and process U2F messages on the server side (the RP side). The library I'm using is Firehed's U2F. Simply do: <code>composer require firehed/u2f</code>.</li>
 	<li><a href="https://github.com/matthewslouismarie/u2fapplicationexample/tree/reg-and-auth">Branch reg-and-auth</a>. We then add the PHP code (and Javascript code to the views) to allow the user to first register a U2F token when they register, and to login using their U2F keys. In the branch, take a look at the controllers <code>RegistrationController</code> and at <code>SecurityController</code>. During the registration process, you'll need to have your U2F Key connected and validate it on the same page as the one on which you'll be entering your username and password. If you submit the form without doing that and you'll get an exception.</li>
</ol>
<span style="color: #666666; font-size: 1.25rem;">Is U2F Perfect?</span>

Not quite. First of all, the counter (which simply keeps track of the number of times the U2F Key authenticated the user) is a very basic mitigation against cloning attacks. If it is possible to clone a U2F Key, then in most cases the counter will not provide sufficient protection.

It also does not protect privacy to 100%. While U2F keys are theoretically not distinguishable from any other (including from the RP point of view), they come with an attestation which can reveal the brand of the U2F key (which, in some cases, could identify the user). Besides, because most U2F Keys are very basic devices, they do not allow unregistering a U2F Token. So, if I have your key, a username and a password, I am able to check that the account indeed belongs to you. Unless you destroy your key, that is.
<h1>Link to the slides</h1>
My slides can be accessed <a href="https://www.slideshare.net/LouisMarieMatthews/secure-secondfactor-authentication-using-u2f-and-php">here</a>.
<h1>References</h1>
Matthews, Louis-Marie. 2018. "Matthewslouismarie/U2fapplicationexample". Github. https://github.com/matthewslouismarie/u2fapplicationexample/tree/reg-and-auth.

Ellingwood, Justin. 2016. "How To Create A Self-Signed SSL Certificate For Apache In Ubuntu 16.04 | Digitalocean". Digitalocean.Com. https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-16-04.

Ehrensvard, Stina. 2015. "Why Yubikey Wins | Yubico". Yubico. https://www.yubico.com/2015/11/why-yubikey-wins/.

Srinivas, Sampath. "Security Keys: Practical Cryptographic Second Factors for the Modern Web." In Financial Cryptography and Data Security: 20th International Conference, FC 2016, Christ Church, Barbados, February 22–26, 2016, Revised Selected Papers, vol. 9603, p. 422. Springer, 2017.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2018-02-28 19:57:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-28 19:57:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[delivering-a-presentation-about-u2f-at-dundee-php]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorised"><![CDATA[Uncategorised]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[ampforwp_custom_content_editor]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[ampforwp_custom_content_editor_checkbox]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[ampforwp-amp-on-off]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portfolio</title>
		<link>http://localhost/?page_id=109</link>
		<pubDate>Mon, 28 May 2018 22:26:07 +0000</pubDate>
		<dc:creator><![CDATA[matthewslouismarie]]></dc:creator>
		<guid isPermaLink="false">http://localhost/?page_id=109</guid>
		<description></description>
		<content:encoded><![CDATA[I'm a student at the University of Dundee. This website presents the different projects I've worked on. You can also take a look at my blog where I write mostly web-development related articles.
<h1>Flipn'Ducks</h1>
<a href="https://github.com/Team-Ecosse/quackathon">GitHub.</a>

We were a team of four.

Our challenge was to make a game controlled by the player's voice in 24 hours.

The loudest the player, the higher the duck jumps (to collect items or avoid obstacles). To flip, the player must make a very precise pitch.

The biggest difficulties for me were to extract the pitch from the voice input and detect pitch patterns to decide if the duck should flip or not.

As it was made using Unity, it works on all major platforms.
<h1>Code for Good (J.P. Morgan's Hackathon)</h1>
We were six.

Our challenge was to make existing websites more accessible for blind people and people with low vision on all major platforms.

We developped a Google Chrome extension summarising the page's content and extracting the main sections of the page to allow the user to quickly jump to a specific part of the page.

Part of my job included making sure everyone's work would fit together and creating an algorithm to extract the main sections of any page when they do not use ARIA technologies or HTML5.

With a certain degree of precision, the algorithm detects if a section of the page is the main section or the navigation bar based on its place in the page's hierarchy and on the number of elements that do not contain any links.

&nbsp;
<h1>Web Developer at Yummy Coffee</h1>
I worked as a web developer for Yummy Coffee from June until August 2017.

I was responsible for the entire development process of full-stack websites as well as PrestaShop and WordPress themes.

I learnt and used several programming practices and web development guidelines, such as <a href="https://www.youtube.com/watch?v=8d2AtAGJPno">Extremely Defensive PHP</a>, <a href="http://rscss.io/">RSCSS</a>, and <a href="https://www.lukew.com/ff/entry.asp?933">Mobile First design</a>.

Part of the work I did included:
<ul>
 	<li><a href="http://91.121.16.158/ohlouis/fmp/">a website for selling cars online</a> made using a database-driven approach,</li>
 	<li><a href="http://www.mytransport.paris/">a website for a taxi company</a>,</li>
 	<li><a href="http://blog.paysdesdelices.com/">adding a dynamic translation system to WordPress</a>, and</li>
 	<li><a href="http://91.121.16.158/ohlouis/layal/fr/blog/layal-mag-c24.html">revamping a PrestaShop theme</a> and adding a blog section to it.</li>
</ul>
<h1>Insider Trading</h1>
This is the 2D game I had to make as part of the Games Programming's module assignment in second year.

I taught myself C++ instead of Unity as I thought the former is more useful to know.

Because it uses Allegro it can run on all major platforms.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2018-05-28 22:26:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-28 22:26:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[portfolio]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
